server.port=8084

spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8
spring.mvc.favicon.enabled=false



#-------------------------- dubbo --------------------------------------
#dubbo provider
dubbo.provider.application.organization=ldg-provider
dubbo.provider.application.name=ldg-study-springboot-dubbo-provider
dubbo.provider.registry.address=192.168.0.241:2181
dubbo.provider.registry.protocol=zookeeper
dubbo.provider.protocol.name=dubbo
dubbo.provider.protocol.port=20990

#dubbo consumer
dubbo.consumer.application.organization=ldg-consumer
dubbo.consumer.application.name=ldg-study-springboot-dubbo-consumer
dubbo.consumer.registry.address=192.168.0.241:2181
dubbo.consumer.registry.protocol=zookeeper



#-------------------------- redis --------------------------------------
#redis 1
redis1.database=0
redis1.host=192.168.0.241
redis1.port=6379
redis1.password=ypzdw
redis1.timeout=20000

redis1.pool.maxTotal=1024
redis1.pool.maxIdle=200
redis1.pool.minIdle=0
redis1.pool.maxWaitMillis=10000
redis1.pool.minEvictableIdleTimeMillis=300000
redis1.pool.numTestsPerEvictionRun=3
redis1.pool.timeBetweenEvictionRunsMillis=60000
redis1.pool.testOnBorrow=true
redis1.pool.testOnReturn=true
redis1.pool.testWhileIdle=true

#redis 2
redis2.database=7
redis2.host=192.168.0.241
redis2.port=6379
redis2.password=ypzdw
redis2.timeout=20000

redis2.pool.maxTotal=1024
redis2.pool.maxIdle=200
redis2.pool.minIdle=0
redis2.pool.maxWaitMillis=10000
redis2.pool.minEvictableIdleTimeMillis=300000
redis2.pool.numTestsPerEvictionRun=3
redis2.pool.timeBetweenEvictionRunsMillis=60000
redis2.pool.testOnBorrow=true
redis2.pool.testOnReturn=true
redis2.pool.testWhileIdle=true

#redis 3
spring.database=7
spring.host=192.168.2.251
spring.port=6279
spring.password=
spring.timeout=20000

spring.pool.maxTotal=1024
spring.pool.maxIdle=200
spring.pool.minIdle=0
spring.pool.maxWaitMillis=10000
spring.pool.minEvictableIdleTimeMillis=300000
spring.pool.numTestsPerEvictionRun=3
spring.pool.timeBetweenEvictionRunsMillis=60000
spring.pool.testOnBorrow=true
spring.pool.testOnReturn=true
spring.pool.testWhileIdle=true




#-------------------------- MQ kafka --------------------------------------
kafka.topics=orderMsg,cacheCartMsg
kafka.enable.auto.commit=false
kafka.group.id=phoenix-store
kafka.bootstrap.servers=192.168.0.241:9092,192.168.0.242:9092,192.168.0.243:9092


#-------------------------- MQ RabbitMQ --------------------------------------
spring.rabbitmq.order.host=192.168.3.21
spring.rabbitmq.order.port=5672
spring.rabbitmq.order.username=guest
spring.rabbitmq.order.password=guest
spring.rabbitmq.order.publisher-confirms=true
spring.rabbitmq.order.publisher-returns=true


spring.rabbitmq.cart.host=192.168.3.32
spring.rabbitmq.cart.port=5672
spring.rabbitmq.cart.username=guest
spring.rabbitmq.cart.password=guest
spring.rabbitmq.cart.publisher-confirms=true
spring.rabbitmq.cart.publisher-returns=true




#-------------------------- Datasource druid --------------------------------------

# 使用druid数据源
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
# 初始化大小，最小，最大
spring.datasource.initialSize = 1
spring.datasource.minIdle = 1
spring.datasource.maxActive = 20
# 配置获取连接等待超时的时间
spring.datasource.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
spring.datasource.validationQuery = SELECT 'x'
spring.datasource.testWhileIdle = true
spring.datasource.testOnBorrow = false
spring.datasource.testOnReturn = false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements = false
spring.datasource.maxPoolPreparedStatementPerConnectionSize = 20
# 配置监控统计拦截的filters
spring.datasource.filters = stat



#-------------------------- Datasource mybatis --------------------------------------
# mybatis
mybatis.typeAliasesPackage = com.pharmaking.store.item.model
mybatis.configLocation = classpath:mybatis/mybatis-config.xml
mybatis.mapperLocations = classpath:com/pharmaking/store/item/*.xml

# mysql
spring.datasource.v3.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.v3.url=jdbc:mysql://192.168.0.242:8306/ypzdw_busi_v3?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
spring.datasource.v3.username=ypzdw
spring.datasource.v3.password=ypzdw

spring.datasource.promotions.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.promotions.url=jdbc:mysql://192.168.0.243:8306/ypzdw_promotions?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
spring.datasource.promotions.username=ypzdw
spring.datasource.promotions.password=ypzdw





#-------------------------- QUARTZ --------------------------------------
quartz.scheduler.instanceName = ServerScheduler
org.quartz.dataSource.standard.driver = com.mysql.jdbc.Driver
org.quartz.dataSource.standard.URL = jdbc:mysql://192.168.0.243:8306/gaea_quartz?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
org.quartz.dataSource.standard.user = ypzdw
org.quartz.dataSource.standard.password = ypzdw
org.quartz.dataSource.standard.maxConnections = 10



#-------------------------- AOP配置 --------------------------------------
# Add @EnableAspectJAutoProxy.
# spring.aop.auto=true
# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).
# spring.aop.proxy-target-class=false

#-------------------------- [MQ] ActiveMQ 配置 --------------------------------------
spring.activemq.broker-url=tcp://127.0.0.1:61616
# 用户名
spring.activemq.user=haha
# 密码
spring.activemq.password=123456
# 在考虑结束之前等待的时间
#spring.activemq.close-timeout=15s
# 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。
spring.activemq.in-memory=true 
# 是否在回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。
spring.activemq.non-blocking-redelivery=false
# 等待消息发送响应的时间。设置为0等待永远。
spring.activemq.send-timeout=0
# 是否信任所有包
#spring.activemq.packages.trust-all=
# 要信任的特定包的逗号分隔列表（当不信任所有包时）
#spring.activemq.packages.trusted=
# 当连接请求和池满时是否阻塞。设置false会抛“JMSException异常”。
#spring.activemq.pool.block-if-full=true
# 如果池仍然满，则在抛出异常前阻塞时间。
#spring.activemq.pool.block-if-full-timeout=-1ms
# 是否在启动时创建连接。可以在启动时用于加热池。
#spring.activemq.pool.create-connection-on-startup=true
# 是否用Pooledconnectionfactory代替普通的ConnectionFactory。
#spring.activemq.pool.enabled=false
# 连接过期超时。
#spring.activemq.pool.expiry-timeout=0ms
# 连接空闲超时
#spring.activemq.pool.idle-timeout=30s
# 连接池最大连接数
#spring.activemq.pool.max-connections=1
# 每个连接的有效会话的最大数目。
#spring.activemq.pool.maximum-active-session-per-connection=500
# 当有"JMSException"时尝试重新连接
#spring.activemq.pool.reconnect-on-exception=true
# 在空闲连接清除线程之间运行的时间。当为负数时，没有空闲连接驱逐线程运行。
#spring.activemq.pool.time-between-expiration-check=-1ms
# 是否只使用一个MessageProducer
#spring.activemq.pool.use-anonymous-producers=true



